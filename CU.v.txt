module CU
(
	input reset,
	input [6:0]opcode,
	input [2:0]func3,
	input [6:0]func7,
	input [31:0]pc,
	input	[31:0]instruction_code,
	output reg [6:0] alu_control,
	
	output reg load_inst,
	output reg store_inst,
	
	output reg jal_control,
	output reg jalr_control,
	output reg branch_predict,
	output reg [31:0]return_address,
	output reg [31:0]imm_addr
);

reg [6:0]opcode_ri = 7'b0010011;
reg [6:0]opcode_rr = 7'b0110011;
reg [6:0]opcode_cb = 7'b1100011;
reg [6:0]opcode_li = 7'b0000011;
reg [6:0]opcode_ss = 7'b0100011;
reg [6:0]opcode_ru1 = 7'b0110111;
reg [6:0]opcode_ru2 = 7'b0010111;
reg [6:0]opcode_uj = 7'b1101111;
reg [6:0]opcode_ui = 7'b1100111;

initial
begin
	load_inst = 0;
	store_inst = 0;
	return_address <= 0;

end
	

always @(*)
begin	
	return_address <= 0;
	
	load_inst = 0;
	store_inst = 0;
	jal_control = 0;
	jalr_control = 0;
	branch_predict = 0;
	alu_control <= 0;
	imm_addr = 0;
	
	case(opcode)
	
		opcode_ri : 
		begin
		imm_addr = instruction_code[31:20];
		//register-immediate
			case(func3)
				//addi
				0 : alu_control <= 1;
				//slti
				2 : alu_control <= 2;
				//sltiu
				3 : alu_control <= 3;
				//andi
				7 : alu_control <= 4;
				//ori
				6 : alu_control <= 5;
				//xori
				4 : alu_control <= 6;
				//slli
				1 : begin
				imm_addr = instruction_code[24:20];				
				alu_control <= 7;
				end
				
				5 : 
				begin
				imm_addr = instruction_code[24:20];
					case(func7)
						//srli
						0: alu_control <= 8;
						//srai
						32: alu_control <= 9;
					endcase
				end
			endcase
		end	
		
		opcode_ru1: begin
		//lui
		imm_addr = instruction_code[31:12];
		alu_control <= 10;
		end
		
		opcode_ru2: begin
		//auipc
		imm_addr = (pc+4)+$signed(instruction_code[31:12] << 12);
		alu_control <= 11;
		end		
		
		opcode_rr : 
		begin
			
		//register-register	
		imm_addr = 0;
			case(func3)
				0 : 
				begin
					case(func7)
						//add
						0: alu_control <= 12;
						//sub
						64: alu_control <= 20;
					endcase
				end
				//slt
				2 : alu_control <= 13;
				//sltu
				3 : alu_control <= 14;
				//and
				7 : alu_control <= 15;
				//or
				6 : alu_control <= 16;
				//xor
				4 : alu_control <= 17;
				//sll
				1 : alu_control <= 18;
				
				5 : 
				begin
					case(func7)
						//srl
						0: alu_control <= 19;
						//sra
						64: alu_control <= 21;
					endcase
				end
			endcase
		end
		//jal
		opcode_uj : begin
		imm_addr = {instruction_code[31], instruction_code[19:12], instruction_code[20], instruction_code[30:21], 1'b0}; 
		alu_control <= 22;
		jal_control <= 1;
		end
		//jalr
		opcode_ui : begin
		imm_addr = instruction_code[31:20];
		alu_control <= 23;
		jalr_control <= 1;
		return_address <= pc+4;
		end
		
		opcode_cb : 
		begin
		imm_addr = {instruction_code[31], instruction_code[7], instruction_code[30:25], instruction_code[11:8], 1'b0};
			case(func3)
				//beq
				0 : alu_control <= 24;
				//bne
				1 : 
				begin
				alu_control <= 25;
				branch_predict <= 1;
				end
				//blt
				4 : alu_control <= 26;
				//bltu
				6 : alu_control <= 27;
				//bge
				5 : alu_control <= 28;
				//bgeu
				7 : alu_control <= 29;
			endcase
		end
		opcode_li : 
		begin
		imm_addr = instruction_code[31:20];
		load_inst = 1;
			case(func3)
				//lw
				2 : alu_control <= 30;
				//lh
				1 : alu_control <= 31;
				//lhu
				5 : alu_control <= 32;
				//lb
				0 : alu_control <= 33;
				//lbu
				4 : alu_control <= 34;
			endcase
		end
		opcode_ss : 
		begin
		imm_addr = {instruction_code[31:25], instruction_code[11:7]};
		store_inst = 1;
			case(func3)
				//sw
				2 : alu_control <= 35;
				//sh
				1 : alu_control <= 36;
				//sb
				0 : alu_control <= 37;
			endcase
		end

		
	endcase
end
	
endmodule